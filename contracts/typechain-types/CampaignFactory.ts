/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CampaignFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCampaign"
      | "campaigns"
      | "donateToCampaign"
      | "getCampaigns"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CampaignCreated" | "DonationMade"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCampaign",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donateToCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaigns",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donateToCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaigns",
    data: BytesLike
  ): Result;
}

export namespace CampaignCreatedEvent {
  export type InputTuple = [
    campaignAddress: AddressLike,
    owner: AddressLike,
    name: string,
    targetAmount: BigNumberish,
    endDate: string
  ];
  export type OutputTuple = [
    campaignAddress: string,
    owner: string,
    name: string,
    targetAmount: bigint,
    endDate: string
  ];
  export interface OutputObject {
    campaignAddress: string;
    owner: string;
    name: string;
    targetAmount: bigint;
    endDate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DonationMadeEvent {
  export type InputTuple = [
    campaignAddress: AddressLike,
    donor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    campaignAddress: string,
    donor: string,
    amount: bigint
  ];
  export interface OutputObject {
    campaignAddress: string;
    donor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CampaignFactory extends BaseContract {
  connect(runner?: ContractRunner | null): CampaignFactory;
  waitForDeployment(): Promise<this>;

  interface: CampaignFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCampaign: TypedContractMethod<
    [
      _name: string,
      _description: string,
      _image: string,
      _targetAmount: BigNumberish,
      _endDate: string
    ],
    [void],
    "nonpayable"
  >;

  campaigns: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  donateToCampaign: TypedContractMethod<
    [index: BigNumberish],
    [void],
    "payable"
  >;

  getCampaigns: TypedContractMethod<[], [string[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCampaign"
  ): TypedContractMethod<
    [
      _name: string,
      _description: string,
      _image: string,
      _targetAmount: BigNumberish,
      _endDate: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "donateToCampaign"
  ): TypedContractMethod<[index: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getCampaigns"
  ): TypedContractMethod<[], [string[]], "view">;

  getEvent(
    key: "CampaignCreated"
  ): TypedContractEvent<
    CampaignCreatedEvent.InputTuple,
    CampaignCreatedEvent.OutputTuple,
    CampaignCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DonationMade"
  ): TypedContractEvent<
    DonationMadeEvent.InputTuple,
    DonationMadeEvent.OutputTuple,
    DonationMadeEvent.OutputObject
  >;

  filters: {
    "CampaignCreated(address,address,string,int256,string)": TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;
    CampaignCreated: TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;

    "DonationMade(address,address,uint256)": TypedContractEvent<
      DonationMadeEvent.InputTuple,
      DonationMadeEvent.OutputTuple,
      DonationMadeEvent.OutputObject
    >;
    DonationMade: TypedContractEvent<
      DonationMadeEvent.InputTuple,
      DonationMadeEvent.OutputTuple,
      DonationMadeEvent.OutputObject
    >;
  };
}
